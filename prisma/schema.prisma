// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id          String @id @default(uuid())
  clerkUserId String @unique 
  email       String @unique 
  name        String ?
  imageUrl    String?
  industry    String?
  linkedin    String? @unique
  github      String? @unique
  industryInsight IndustryInsight? @relation(fields: [industry],references: [industry])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bio String?
  experience Int?

  skills String[]
  assessments Assessment[]
  interviewAssess InterviewAssess[]
  resume  Resume[]
  coverLetter CoverLetter[]
  roadmaps Roadmap[]
  


  // PrepWise Integration - Interview related fields
  interviewSessions InterviewSession[]
  callAnalytics CallAnalytics[]
  // PrepWise Integration - Interview related fields
}

model Assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     // quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical"
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model InterviewAssess {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  interviewScore     Float     // quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  domain        String[]
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}


// PrepWise Integration Models
model InterviewSession {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Session details
  sessionType     String    // "mock", "practice", "assessment"
  industry        String?   // From user's industry or selected for session
  role            String?   // Target role for interview
  difficulty      String?   // "beginner", "intermediate", "advanced"
  duration        Int?      // Duration in minutes
  
  // Questions and responses
  questions       Json[] @default([])
  responses       Json[]    // Array of user responses with timestamps
  
  // Analysis and scoring
  overallScore    Float?
  technicalScore  Float?
  communicationScore Float?
  confidenceScore Float?
  
  // AI Analysis
  strengths       String[]
  weaknesses      String[]
  improvementTips String[]
  detailedFeedback String?  @db.Text
  
  // Session metadata
  startedAt       DateTime?
  endedAt         DateTime?
  status          SessionStatus @default(SCHEDULED)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}


model CallAnalytics {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  sessionId       String?   @unique // Link to InterviewSession
  
  // Call details
  duration        Float?    // Call duration in seconds
  cost            Float?    // Call cost
  transcript      String?   @db.Text
  
  // Audio analysis
  speakingTime    Float?    // User speaking time in seconds
  silenceTime     Float?    // Silence duration
  wordsPerMinute  Float?
  fillerWordsCount Int?
  
  // Call metadata
  startedAt       DateTime?
  endedAt         DateTime?
  metadata        Json?     // Additional metadata
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([userId])
  @@index([sessionId])
}

// PrepWise Integration Models

// ...existing code...

model Resume {
  id          String    @id @default(cuid())
  userId      String    // Remove @unique
  title       String   // Add title field
  user        User      @relation(fields: [userId], references: [id])
  content     String    @db.Text
  atsScore    Float?
  feedback    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, title])  // Add compound unique constraint
  @@index([userId])
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String    // Name of the company applying to
  jobTitle        String    // Position applying for
  url             String?   //
  status          String    @default("draft") // draft, completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}




// Combined Industry Trends and Salary Insights
model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique  // The industry this data belongs to (e.g., "tech-software-development")
  
  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   DemandLevel    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook MarketOutlook    // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])
}

enum DemandLevel{
  HIGH
  MEDIUM 
  LOW 
}

enum MarketOutlook{
  POSITIVE 
  NEUTRAL 
  NEGATIVE
}




model Roadmap {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade) // <-- change here
  domain     String
  subdomain  String
  inputs     Json
  aiRaw      String
  aiJson     Json     @db.JsonB
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Status {
  PENDING
  COMPLETE
  FAILED
}


